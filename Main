-- Rayfield UI version of Walvy Community TP Menu (No Key System)
-- Make sure Rayfield library is loaded before this script runs

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Walvy Community",
    LoadingTitle = "Walvy Community",
    LoadingSubtitle = "by Walvy",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "Walvy",
       FileName = "Settings"
    },
    Discord = {
       Enabled = true,
       Invite = "EXK4dQxJBv",
       RememberJoins = true
    },
    KeySystem = false
})

local MainTab = Window:CreateTab("Main", 4483362458)

local StatusLabel

StatusLabel = MainTab:CreateParagraph({
    Title = "Status",
    Content = "Ready to Teleport."
})

Rayfield:Notify({
    Title = "✅ Walvy Community Loaded",
    Content = "Script berhasil dijalankan!",
    Duration = 6,
    Image = 4483362458
})

-- Service Setup
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local tpAmt = 80
local void = CFrame.new(0, -3.4028234663852886e+38, 0)
local teleporting = false
local random = Random.new()

-- Teleport Function
local function TP(position)
    if not teleporting then
        teleporting = true
        if typeof(position) == "CFrame" then
            hrp.CFrame = position + Vector3.new(
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001)
            )
            RunService.Heartbeat:Wait()
            teleporting = false
        end
    end
end

-- TP Functions
function DeliverBrainrot(label)
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign and sign:FindFirstChild("YourBase") and sign.YourBase.Enabled then
            local hitbox = plot:FindFirstChild("DeliveryHitbox")
            if hitbox then
                local target = hitbox.CFrame * CFrame.new(0, -3, 0)
                for i = 1, tpAmt do TP(target) end
                TP(void)
                for i = 1, tpAmt/16 do TP(target) end
                task.wait(1)
                local dist = (hrp.Position - target.Position).Magnitude
                label.Text("TP Succeeded! Distance: "..math.floor(dist))
                return
            end
        end
    end
    label.Text("DeliveryHitbox Not Found")
end

function TPNearestBase(label)
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return end
    local closest, shortest = nil, math.huge
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign and sign:FindFirstChild("YourBase") and not sign.YourBase.Enabled then
            local podiums = plot:FindFirstChild("AnimalPodiums")
            if podiums then
                for _, p in pairs(podiums:GetChildren()) do
                    local spawn = p:FindFirstChild("Base") and p.Base:FindFirstChild("Spawn")
                    if spawn then
                        local dist = (spawn.Position - hrp.Position).Magnitude
                        if dist < shortest then
                            shortest = dist
                            closest = spawn
                        end
                    end
                end
            end
        end
    end
    if closest then
        local target = closest.CFrame * CFrame.new(0, 2, 0)
        for i = 1, tpAmt do TP(target) end
        TP(void)
        for i = 1, tpAmt/16 do TP(target) end
        task.wait(1)
        local dist = (hrp.Position - target.Position).Magnitude
        label.Text("TP Base Success! Distance: "..math.floor(dist))
    else
        label.Text("No Valid Base Found")
    end
end

function TweenSteal(label)
    local delivery
    for _, v in ipairs(workspace.Plots:GetDescendants()) do
        if v.Name == "DeliveryHitbox" and v.Parent:FindFirstChild("PlotSign") and v.Parent.PlotSign:FindFirstChild("YourBase") and v.Parent.PlotSign.YourBase.Enabled then
            delivery = v
            break
        end
    end
    if not delivery then label.Text("DeliveryHitbox Not Found") return end
    local target = delivery.CFrame * CFrame.new(0, -3, 0)
    for i = 1, tpAmt do TP(target) end
    TP(void)
    for i = 1, tpAmt/16 do TP(target) end
    task.wait(1)
    local dist = (hrp.Position - target.Position).Magnitude
    label.Text("Tween TP Complete! Distance: "..math.floor(dist))
end

-- Create Buttons
MainTab:CreateButton({
    Name = "TP To Delivery Box",
    Callback = function()
        DeliverBrainrot({Text = function(v) StatusLabel:Set({Content = v}) end})
    end
})

MainTab:CreateButton({
    Name = "TP Inside Nearest Base",
    Callback = function()
        TPNearestBase({Text = function(v) StatusLabel:Set({Content = v}) end})
    end
})

MainTab:CreateButton({
    Name = "Tween Steal",
    Callback = function()
        TweenSteal({Text = function(v) StatusLabel:Set({Content = v}) end})
    end
})

MainTab:CreateParagraph({
    Title = "Hotkey",
    Content = "Press RightShift to hide/show GUI"
})

-- ████████ TAB ESP ████████
